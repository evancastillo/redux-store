{"version":3,"sources":["utils/helpers.js","components/Cart/cartSlice.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/productListSlice.js","assets/spinner.gif","components/ProductList/index.js","components/CategoryMenu/categoryMenuSlice.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","App.js","serviceWorker.js","app/store.js","index.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","slice","createSlice","initialState","items","reducers","addToCart","state","action","push","payload","updateCartQuantity","map","product","purchaseQuantity","addMultipleToCart","toggleCartOpen","removeFromCart","filter","length","actions","selectCart","cart","selectCartOpen","ProductItem","item","useSelector","dispatch","useDispatch","image","price","quantity","className","to","alt","src","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","products","updateProducts","selectProducts","productList","selectCurrentCategory","categoryMenu","currentCategory","ProductList","useQuery","loading","data","useEffect","forEach","then","category","spinner","categories","updateCategories","updateCurrentCategory","selectCategories","CategoryMenu","categoryData","id","CartItem","type","placeholder","value","onChange","target","role","removeItemFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","cartOpen","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","__typename","productForCart","addItemToCart","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","setTimeout","saveOrder","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","configureStore","reducer","categoryMenuReducer","productListReducer","cartReducer","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.71c94b43.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open db connection\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // vars for database, transacton and object store\n    let db, tx, store;\n\n    // if new or version updated...\n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    // db open, so set up transaction handling\n    request.onsuccess = function (e) {\n      db = request.result;\n\n      // create a transaction on the given store (products, categories, cart)\n      tx = db.transaction(storeName, 'readwrite');\n\n      store = tx.objectStore(storeName);\n\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      // execute the appropriate transaction\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}","import { createSlice } from '@reduxjs/toolkit'\n\nexport const slice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    open: false\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      state.open = true;\n      state.items.push(action.payload);\n    },\n    updateCartQuantity: (state, action) => {\n      state.open = true;\n      state.items = state.items.map(product => {\n        if (action.payload._id === product._id) {\n          product.purchaseQuantity = action.payload.purchaseQuantity;\n        }\n        return product;\n      });\n    },\n    addMultipleToCart: (state, action) => {\n      state.items = [...state.items, ...action.payload];\n    },\n    toggleCartOpen: (state) => {\n      state.open = !state.open;\n    },\n    removeFromCart: (state, action) => {\n      state.items = state.items.filter(product => {\n        return product._id !== action.payload._id;\n      });\n      state.open = state.items.length > 0;\n    }\n  }\n});\n\nexport const { addToCart, updateCartQuantity, addMultipleToCart, toggleCartOpen, removeFromCart } = slice.actions;\n\nexport const selectCart = state => state.cart.items;\nexport const selectCartOpen = state => state.cart.open;\n\nexport default slice.reducer;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom';\nimport { pluralize, idbPromise } from '../../utils/helpers'\nimport { selectCart, addToCart, updateCartQuantity } from '../Cart/cartSlice';\n\nfunction ProductItem(item) {\n  const cart = useSelector(selectCart);\n  const dispatch = useDispatch();\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const addItemToCart = () => {\n    const itemInCart = cart.find(cartItem => cartItem._id === _id);\n\n    if (itemInCart) {\n      dispatch(updateCartQuantity({\n         _id: itemInCart._id,\n          purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      }));\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n\n    } else {\n      dispatch(addToCart({ ...item, purchaseQuantity: 1 }));\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addItemToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import { createSlice } from '@reduxjs/toolkit'\n\nexport const slice = createSlice({\n  name: 'productList',\n  initialState: {\n    products: []\n  },\n  reducers: {\n    updateProducts: (state, action) => {\n      state.products = [...action.payload];\n    }\n  }\n});\n\nexport const { updateProducts } = slice.actions;\n\nexport const selectProducts = state => state.productList.products;\nexport const selectCurrentCategory = state => state.categoryMenu.currentCategory;\n\nexport default slice.reducer;","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useSelector, useDispatch } from 'react-redux'\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport { selectCurrentCategory, selectProducts, updateProducts } from './productListSlice';\nimport spinner from '../../assets/spinner.gif';\n\nfunction ProductList() {\n  const currentCategory = useSelector(selectCurrentCategory);\n  const products = useSelector(selectProducts);\n  const dispatch = useDispatch();\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      // store it in redux store\n      dispatch(updateProducts(data.products));\n\n      // also store each product in IndexedDB\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n\n    } else if (!loading) {\n      // offline, so get data from the 'products' store in IndexedDB\n      idbPromise('products', 'get').then(products => {\n        // put 'em  into global state\n        dispatch(updateProducts(products));\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return products;\n    }\n\n    return products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport const slice = createSlice({\n  name: 'categoryMenu',\n  initialState: {\n    currentCategory: '',\n    categories: []\n  },\n  reducers: {\n    updateCategories: (state, action) => {\n      state.categories = [...action.payload];\n    },\n    updateCurrentCategory: (state, action) => {\n      state.currentCategory = action.payload;\n    }\n  }\n});\n\nexport const { updateCategories, updateCurrentCategory } = slice.actions;\n\nexport const selectCategories = state => state.categoryMenu.categories;\n\nexport const selectCurrentCategory = state => state.categoryMenu.currentCategory;\n\nexport default slice.reducer;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport {\n  selectCategories,\n  updateCategories,\n  updateCurrentCategory\n} from './categoryMenuSlice';\n\nfunction CategoryMenu() {\n  const categories = useSelector(selectCategories);\n  const dispatch = useDispatch();\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if category data exists or has been updated by useQuery, run dispatch()\n    if (categoryData) {\n      // execute dispatch function to update store\n      dispatch(updateCategories(categoryData.categories));\n\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch(updateCategories(categories));\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch(updateCurrentCategory(id));\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useDispatch } from 'react-redux'\nimport { updateCartQuantity, removeFromCart } from '../Cart/cartSlice';\nimport { idbPromise } from '../../utils/helpers';\n\nconst CartItem = ({ item }) => {\n  const dispatch = useDispatch();\n\n  const removeItemFromCart = item => {\n    dispatch(removeFromCart({ _id: item._id }));\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n\n    if (value === '0') {\n      dispatch(removeFromCart({ _id: item._id }));\n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch(updateCartQuantity({\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      }));\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img src={`/images/${item.image}`} alt={item.name} />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"-1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeItemFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;\n\n\n\n\n\n\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { selectCart, selectCartOpen, toggleCartOpen, addMultipleToCart } from '../Cart/cartSlice';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { idbPromise } from '../../utils/helpers';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const cart = useSelector(selectCart);\n  const cartOpen = useSelector(selectCartOpen);\n  const dispatch = useDispatch();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch(addMultipleToCart([...cart]));\n    };\n\n    if (!cart.length) {\n      getCart();\n    }\n  }, [cart.length, dispatch]);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  function toggleCart() {\n    dispatch(toggleCartOpen());\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds }\n    });\n  }\n\n  if (!cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"cart\">🛒</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {cart.length ? (\n        <div>\n          {cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>&nbsp;\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n                </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;","import React from 'react';\nimport ProductList from '../components/ProductList';\nimport CategoryMenu from '../components/CategoryMenu';\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectCart, addToCart, updateCartQuantity, removeFromCart } from '../components/Cart/cartSlice';\nimport { selectProducts, updateProducts } from '../components/ProductList/productListSlice';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport Cart from '../components/Cart';\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n  const products = useSelector(selectProducts);\n  const cart = useSelector(selectCart);\n  const dispatch = useDispatch();\n\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const addItemToCart = () => {\n    const itemInCart = cart.find(cartItem => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch(updateCartQuantity({\n        _id: itemInCart._id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      }));\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      const { category, description, __typename, ...productForCart } = currentProduct;\n      dispatch(addToCart({ ...productForCart, purchaseQuantity: 1 }));\n      idbPromise('cart', 'put', { ...productForCart, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeItemFromCart = () => {\n    dispatch(removeFromCart({ _id: currentProduct._id }));\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  useEffect(() => {\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch(updateProducts(data.products));\n\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then(indexedProducts => {\n        dispatch(updateProducts(indexedProducts));\n      });\n    }\n  }, [products, loading, data, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={() => addItemToCart()}>Add to Cart</button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeItemFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nconst Success = () => {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map(product => product._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach(item => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(window.location.assign('/'), 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>\n          Than you for your purchase!\n        </h2>\n        <h2>\n          You will now be redirected to the homepage...\n        </h2>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Success;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport OrderHistory from './pages/OrderHistory';\nimport Success from './pages/Success';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/orderHistory\" component={OrderHistory} />\n            <Route exact path=\"/products/:id\" component={Detail} />\n            <Route exact path=\"/success\" component={Success} />\n            <Route component={NoMatch} />\n          </Switch>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport categoryMenuReducer from '../components/CategoryMenu/categoryMenuSlice';\nimport productListReducer from '../components/ProductList/productListSlice';\nimport cartReducer from '../components/Cart/cartSlice';\n\nexport default configureStore({\n  reducer: {\n    categoryMenu: categoryMenuReducer,\n    productList: productListReducer,\n    cart: cartReducer\n  }\n});\n\n// reducer: {\n//   products: [],\n//   cart: [],\n//   cartOpen: false,\n//   categories: [],\n//   currentCategory: ''\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}